#!/usr/bin/env python3

from glob import glob
from canvasapi import Canvas
from canvasapi import exceptions as cx
from re import findall
from urllib.parse import quote
from os import system, stat, makedirs
from os.path import exists, dirname, join, basename
import json

def mdfilename2htmlfilename(mdf):
    a,b = 'content/', '.md'
    assert mdf.startswith(a)
    assert mdf.endswith(b)
    return 'static/' + mdf[len(a):-len(b)] + ".html"

def md_needs_updating(mdfile,htfile=None):
    """Check whether a given Markdown file has changed since last push.
    If given, compare against specified HTML file rather than one derived from Markdown file name.
    Returns : True (yes, it has changed; we should update)
              False (no change; no need to update)"""

    if htfile is None:
        htfile = mdfilename2htmlfilename(mdfile)
    makedirs(dirname(htfile),exist_ok=True)

    if exists(htfile):
        if stat(htfile).st_mtime > stat(mdfile).st_mtime:
            return False
        else:
            print("Updating {}".format(mdfile))
    else:
        print("Creating {}".format(mdfile))
    return True


def md2html(mdfile,title=None):
    """Convert a Markdown file to Canvas-suitable HTML fragment.
    Unless specified, title will be extracted from the YAML.
    Returns: {'title': title, 'body': body}"""

    htfile = mdfilename2htmlfilename(mdfile)
    makedirs(dirname(htfile),exist_ok=True)
    
    # Find the long title associated with this markdown file
    if title is None:
        with open(mdfile) as h:
            lines = h.readlines()
            for line in lines[1:]:
                if line.startswith('---'):
                    break
                if line.startswith('title:'):
                    title = line.split('title:')[1].strip()
    if title is None:
        raise Exception(f"No title for {mdfile}")
    
    # Pandoc to create the HTML file; we then tinker with it
    system(f"pandoc -t html -F mermaid-filter -o '{htfile}' --webtex '{mdfile}'")

    # Load html
    html = open(htfile).read()

    # Strip all ".md" extensions from hyperlinks; Canvas doesn't like this but other renderers (e.g. github) require it.
    html = html.replace('.md">','">')

    # Strangely, seems all internal links are broken; maybe they always were!
    links = findall("\<a href=\"([^\"]+)\"", html)
    prefix = f"{config['API_URL']}courses/{config['course']}/pages/"
    for link in links:
        if not "://" in link:
            html = html.replace(f'<a href="{link}"', f'<a href="{prefix}{link}"')
    
    # Equations are a bit of an ugly hack
    # the lines below convert the pandoc code to something using Canvas's renderer
    # see here for why it's double-encoded: https://community.canvaslms.com/t5/Canvas-Instructional-Designer/Best-way-to-add-LaTeX-equations/td-p/175131
    tag = "https://latex.codecogs.com/png.latex?"
    eqns = findall("\"https://latex.codecogs.com/png.latex\?([^\"]+)\"",html)
    for eqn in eqns:
        html = html.replace(tag + eqn + "\"", "/equation_images/" + quote(eqn) + "\"", 1)
        
    # Add borders to tables; crude but e.g. this didn't seem to work: https://stackoverflow.com/questions/27300329/table-with-borders-in-html-and-latex-output-from-markdown-source-with-pandoc
    old = '<table>'
    new = '<table style="border-collapse: collapse;" border="1">'
    html = html.replace(old,new)

    # Replace $base in a hyperlink with the URL defined in config.json
    old = 'src="$base/'
    new = f'src="{config["base"]}/'
    html = html.replace(old,new)

    # Write all changes
    with open(htfile, 'w') as h:
        h.write(html)

    with open(htfile) as h: body = h.read()
    return {'title': title, 'body': body}

        
def push_page(mdfile):
    if not md_needs_updating(mdfile): return
    wiki_page = md2html(mdfile)
    
    title = wiki_page['title']
    body  = wiki_page['body']
    
    try:
        page = course.get_page(wiki_page['title'])
        page.edit(wiki_page=wiki_page)
    except cx.ResourceDoesNotExist:
        course.create_page(wiki_page)

def read_index(f):
    """Read a file which defines order and indentation for pages in a module"""
    with open(f) as h:
        lines = [l.strip('\n') for l in h.readlines()]
        lines = [l for l in lines if l != ""]
    index = list()
    for pos,l in enumerate(lines):
        index.append((pos+1, l.index("-")//2, l.split("- ")[1].split(".md")[0].strip()))
    return index

def set_module_page_order(mdir):
    """Set the order and indentation of pages in a module.
    mdir should be a path e.g. './content/Modules/Part_1/'"""
    
    assert mdir.endswith("/")
    
    # Is this a subdirectory and therefore a module?
    if mdir.count('/') < 3: #e.g. content/Modules/Part 1/'
        return
    
    # Build module name from directory name
    module_name = mdir.split('/')[-2].replace("_", " ")

    # Create the module (if necessary); then get the instance
    module_names = [m.name for m in course.get_modules()]
    if not module_name in module_names:
        print("Creating module", module_name)
        course.create_module({"name": module_name})
    module = [m for m in course.get_modules() if m.name == module_name][0]       

    # Get information about the pages and their position/indent in this module
    pages = [p for p in module.get_module_items()]
    pages_info = [(p.position, p.indent, p.page_url) for p in pages]
    pages_info.sort(key = lambda p: p[0]) # sort by position
        
    # Is there an index.org file?
    idxfile = join(mdir, "index.org")
    if exists(idxfile):
        # If so, extract what the ordering and indenting should be
        target_info = read_index(idxfile)
    else:
        target_info = []
        
    # Get a list of files which should appear in the module
    mdfiles = glob(join(dirname(idxfile),"**/*.md"),recursive=True)
    names = [basename(f)[:-3] for f in mdfiles]

    # Append any files which are not present in the index.org file and reload
    missing = set(names) - set([t[2] for t in target_info])
    if len(missing) > 0:
        with open(idxfile, 'a') as h:
            for m in missing:
                h.write(f"- {m}.md\n")
        target_info = read_index(idxfile)
            
    # If the layouts agree, then nothing to do
    if pages_info == target_info:
        return

    # Otherwise, scrub it and start again
    for p in pages: p.delete() # delete all pages in the module
    all_pages = [*course.get_pages()] # get all pages

    for position,indent,url in target_info:
        p = [p for p in all_pages if p.url == url][0]
        print(f"Module : {module_name} / Page : {p.title} : ({position}, {indent})")
        module.create_module_item({'title': p.title, 'type': 'Page', 'page_url': p.url, 'position': position, 'indent': indent})                    
    
def push_assignment(mdfile):
    if not md_needs_updating(mdfile): return   
    wiki_page = md2html(mdfile)

    title = wiki_page['title']
    body  = wiki_page['body']

    assignments = [*course.get_assignments()]

    if not title in [a.name for a in assignments]:
        raise Exception("No existing Assignment of name", title)

    assignment = assignments[[a.name for a in assignments].index(title)]
    assignment.edit(assignment={"description": body})

def push_discussion(mdfile):   
    mdfile_topic = mdfile+"_topic.md"
    mdfile_post  = mdfile+"_post.md"

    # Compare the age of the parent Markdown file against each HTML file (topic and post files)
    if not any([md_needs_updating(mdfile,mdfilename2htmlfilename(md)) for md in [mdfile_topic,mdfile_post]]): return
    
    # Everything below "***" in the markdown should be interpreted as a post to be made on that discussion topic
    # Split the markdown file into two separate files, which we upload in different ways
    markdown = open(mdfile).read()
    N = markdown.index("\n***\n")
    with open(mdfile_topic, 'w') as h:
        h.write(markdown[:N]  + '\n')
    with open(mdfile_post,  'w') as h:
        h.write(markdown[N+5:])

    topic_page = md2html(mdfile_topic)
    title = topic_page['title']
    post_page  = md2html(mdfile_post,title=title)

    from os import remove
    remove(mdfile_topic)
    remove(mdfile_post)

    # If the discussion exists, get the object; if not, create a new one
    discussions = [*course.get_discussion_topics()]
    if title in [a.title for a in discussions]:
        discussion = discussions[[a.title for a in discussions].index(title)]
    else:
        discussion = course.create_discussion_topic(title=title, require_initial_post=True)        
    discussion.update(message=topic_page['body']) # update with contents

    # Delete all posts made by me and then post the updated solution
    posts = [*discussion.get_topic_entries()]
    current_user = canvas.get_current_user()
    posts = [p for p in posts if p.user_id == current_user.id]
    for p in posts:
        try:
            p.delete()
            # Seems to be a strange bug in canvasapi which throws a JSON error here, but the action works
        except:
            pass

    discussion.post_entry(message=post_page['body'])

if __name__=='__main__':
    # Load credentials and connect to Canvas
    with open("config.json") as h:
        config = json.load(h)
    canvas = Canvas(config['API_URL'], config['TOKEN'])
    course = canvas.get_course(config['course'])

    # Find and push all pages
    makedirs("content/Modules", exist_ok=True)
    mdfiles = glob("content/Modules/**/*.md", recursive=True)
    for f in mdfiles:
        push_page(f)

    # Add pages to relevant modules and set order if specified
    mdirs = glob("content/Modules/**/", recursive=True)
    for mdir in mdirs:
        set_module_page_order(mdir)
        
    # Find and push all Assignments
    makedirs("content/Assignments", exist_ok=True)
    mdfiles = glob("content/Assignments/**/*.md", recursive=True)
    for f in mdfiles:
        push_assignment(f)
        
    # Find and push all Discussions
    makedirs("content/Discussions", exist_ok=True)
    mdfiles = glob("content/Discussions/*.md")
    for f in mdfiles:
        push_discussion(f)
    
