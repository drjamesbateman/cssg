#!/usr/bin/env python3

from glob import glob
from canvasapi import Canvas
from canvasapi import exceptions as cx
from re import findall
from urllib.parse import quote
from os import system, stat, makedirs
from os.path import exists, dirname
import json

def mdfilename2htmlfilename(mdf):
    a,b = 'content/', '.md'
    assert mdf.startswith(a)
    assert mdf.endswith(b)
    return 'static/' + mdf[len(a):-len(b)] + ".html"

def md_needs_updating(mdfile,htfile=None):
    """Check whether a given Markdown file has changed since last push.
    If given, compare against specified HTML file rather than one derived from Markdown file name.
    Returns : True (yes, it has changed; we should update)
              False (no change; no need to update)"""

    if htfile is None:
        htfile = mdfilename2htmlfilename(mdfile)
    makedirs(dirname(htfile),exist_ok=True)

    if exists(htfile):
        if stat(htfile).st_mtime > stat(mdfile).st_mtime:
            return False
        else:
            print("Updating {}".format(mdfile))
    else:
        print("Creating {}".format(mdfile))
    return True


def md2html(mdfile,title=None):
    """Convert a Markdown file to Canvas-suitable HTML fragment.
    Unless specified, title will be extracted from the YAML.
    Returns: {'title': title, 'body': body}"""

    htfile = mdfilename2htmlfilename(mdfile)
    makedirs(dirname(htfile),exist_ok=True)
    
    # Find the long title associated with this markdown file
    if title is None:
        with open(mdfile) as h:
            lines = h.readlines()
            for line in lines[1:]:
                if line.startswith('---'):
                    break
                if line.startswith('title:'):
                    title = line.split('title:')[1].strip()
    if title is None:
        raise Exception(f"No title for {mdfile}")
    
    # Pandoc to create the HTML file; we then tinker with it
    system(f"pandoc -t html -F mermaid-filter -o '{htfile}' --webtex '{mdfile}'")

    # Strip all ".md" extensions from hyperlinks; Canvas doesn't like this but other renderers (e.g. github) require it.
    html = open(htfile).read()
    html = html.replace('.md">','">')
    with open(htfile, 'w') as h:
        h.write(html)
    
    # Equations are a bit of an ugly hack
    # the lines below convert the pandoc code to something using Canvas's renderer
    # see here for why it's double-encoded: https://community.canvaslms.com/t5/Canvas-Instructional-Designer/Best-way-to-add-LaTeX-equations/td-p/175131
    html = open(htfile).read()
    tag = "https://latex.codecogs.com/png.latex?"
    eqns = findall("\"https://latex.codecogs.com/png.latex\?([^\"]+)\"",html)
    for eqn in eqns:
        html = html.replace(tag + eqn + "\"", "/equation_images/" + quote(eqn) + "\"", 1)
    with open(htfile, 'w') as h:
        h.write(html)

    # Add borders to tables; crude but e.g. this didn't seem to work: https://stackoverflow.com/questions/27300329/table-with-borders-in-html-and-latex-output-from-markdown-source-with-pandoc
    old = '<table>'
    new = '<table style="border-collapse: collapse;" border="1">'
    html = open(htfile).read()
    html = html.replace(old,new)
    with open(htfile, 'w') as h:
        h.write(html)

    with open(htfile) as h: body = h.read()
    return {'title': title, 'body': body}

        
def push_page(mdfile):
    if not md_needs_updating(mdfile): return
    wiki_page = md2html(mdfile)
    
    title = wiki_page['title']
    body  = wiki_page['body']
    
    # If this is in a sub-directory, then assume that is the intended Canvas Module
    if mdfile.count('/') == 3: #e.g. content/Modules/Part 1/review-1a.md'
        module_name = mdfile.split('/')[2].replace("_", " ")
        page_url = mdfile.split('/')[3].split('.md')[0]
    else:
        module_name = None
        # page_url is only needed when we're putting a page into a Canvas Module
        
    try:
        page = course.get_page(wiki_page['title'])
        page.edit(wiki_page=wiki_page)
    except cx.ResourceDoesNotExist:
        course.create_page(wiki_page)

    if module_name is not None:
        module_names = [m.name for m in course.get_modules()]
        if not module_name in module_names:
            print("Creating module", module_name)
            course.create_module({"name": module_name})
        modules = [*course.get_modules()]
        m = [m for m in modules if m.name == module_name][0]
        existing = [(m.title, m.page_url) for m in m.get_module_items()]
        if (title, page_url) in existing:
            pass
        else:
            print("Adding page to module", module_name)
            m.create_module_item({'title': title, 'type': 'Page', 'page_url': page_url})

def push_assignment(mdfile):
    if not md_needs_updating(mdfile): return   
    wiki_page = md2html(mdfile)

    title = wiki_page['title']
    body  = wiki_page['body']

    assignments = [*course.get_assignments()]

    if not title in [a.name for a in assignments]:
        raise Exception("No existing Assignment of name", title)

    assignment = assignments[[a.name for a in assignments].index(title)]
    assignment.edit(assignment={"description": body})

def push_discussion(mdfile):   
    mdfile_topic = mdfile+"_topic.md"
    mdfile_post  = mdfile+"_post.md"

    # Compare the age of the parent Markdown file against each HTML file (topic and post files)
    if not any([md_needs_updating(mdfile,mdfilename2htmlfilename(md)) for md in [mdfile_topic,mdfile_post]]): return
    
    # Everything below "***" in the markdown should be interpreted as a post to be made on that discussion topic
    # Split the markdown file into two separate files, which we upload in different ways
    markdown = open(mdfile).read()
    N = markdown.index("\n***\n")
    with open(mdfile_topic, 'w') as h:
        h.write(markdown[:N]  + '\n')
    with open(mdfile_post,  'w') as h:
        h.write(markdown[N+5:])

    topic_page = md2html(mdfile_topic)
    title = topic_page['title']
    post_page  = md2html(mdfile_post,title=title)

    from os import remove
    remove(mdfile_topic)
    remove(mdfile_post)

    # If the discussion exists, get the object; if not, create a new one
    discussions = [*course.get_discussion_topics()]
    if title in [a.title for a in discussions]:
        discussion = discussions[[a.title for a in discussions].index(title)]
    else:
        discussion = course.create_discussion_topic(title=title, require_initial_post=True)        
    discussion.update(message=topic_page['body']) # update with contents

    # Delete all posts made by me and then post the updated solution
    posts = [*discussion.get_topic_entries()]
    current_user = canvas.get_current_user()
    posts = [p for p in posts if p.user_id == current_user.id]
    for p in posts:
        try:
            p.delete()
            # Seems to be a strange bug in canvasapi which throws a JSON error here, but the action works
        except:
            pass

    discussion.post_entry(message=post_page['body'])

if __name__=='__main__':
    # Load credentials and connect to Canvas
    with open("config.json") as h:
        config = json.load(h)
    canvas = Canvas(config['API_URL'], config['TOKEN'])
    course = canvas.get_course(config['course'])

    # Find and push all Modules
    makedirs("content/Modules", exist_ok=True)
    mdfiles = glob("content/Modules/**/*.md", recursive=True)
    for f in mdfiles:
        push_page(f)

    # Find and push all Assignments
    makedirs("content/Assigments", exist_ok=True)
    mdfiles = glob("content/Assignments/*.md")
    for f in mdfiles:
        push_assignment(f)
        
    # Find and push all Discussions
    makedirs("content/Discussions", exist_ok=True)
    mdfiles = glob("content/Discussions/*.md")
    for f in mdfiles:
        push_discussion(f)
    
